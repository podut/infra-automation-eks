stages:
- init
- build
- deploy
- deploy_argocd
- cleanup

image:
  name: hashicorp/terraform:1.7
  entrypoint: [""]

init:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  stage: init
  before_script:
  # install aws cli
  - apk --no-cache add curl python3 py3-pip
  - pip3 install --no-cache-dir awscli --break-system-packages

  # establish connection with AWS to get access credentials
  - >
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token ${GITLAB_OIDC_TOKEN}
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity
  script:
    - terraform init
  artifacts:
    paths:
      - .terraform/
      - .terraform.lock.hcl

build:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  stage: build
  before_script:
  # install aws cli
  - apk --no-cache add curl python3 py3-pip
  - pip3 install --no-cache-dir awscli --break-system-packages

  # establish connection with AWS to get access credentials
  - >
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token ${GITLAB_OIDC_TOKEN}
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity
  script:
  - terraform plan -out "planfile"
  artifacts:
    paths:
      - planfile

deploy:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  stage: deploy
  before_script:
  # install aws cli
  - apk --no-cache add curl python3 py3-pip
  - pip3 install --no-cache-dir awscli --break-system-packages

  # establish connection with AWS to get access credentials
  - >
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token ${GITLAB_OIDC_TOKEN}
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity
  script:
  - terraform apply -input=false "planfile"
  # when: manual

deploy_argocd:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  stage: deploy_argocd
  image:
    name: bearengineer/awscli-kubectl:latest
    entrypoint: [""]
  before_script:
  # establish connection with AWS to get access credentials
  - >
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token ${GITLAB_OIDC_TOKEN}
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity
  - aws eks update-kubeconfig --region ${TF_VAR_aws_region} --name ${TF_VAR_name}
  - export KUBE_CONFIG_PATH=/root/.kube/config
  script:
  - kubectl apply -f online-boutique-argo-app.yaml
  - kubectl apply -f platform-argo-app.yaml

cleanup:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  stage: cleanup
  before_script:
  # install aws cli
  - apk --no-cache add curl python3 py3-pip
  - pip3 install --no-cache-dir awscli --break-system-packages

  # establish connection with AWS to get access credentials
  - >
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token ${GITLAB_OIDC_TOKEN}
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity  
  - aws eks update-kubeconfig --region ${TF_VAR_aws_region} --name ${TF_VAR_name}
  - export KUBE_CONFIG_PATH=/root/.kube/config  
  script:
  - terraform destroy -auto-approve
  when: manual
